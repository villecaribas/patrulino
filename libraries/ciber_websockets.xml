<blocks app="Snap4Arduino 7.0.4
, http://snap4arduino.rocks" version="2">
    <palette>
        <category name="CIBER-EUREKA" color="78,190,69,1" />
    </palette>
    <block-definition s="$Patrulha-0.618-81-157-214 $EU-0.618-255-214-0 $RE-0.618-214-36-8 $KA-0.618-78-190-69 $.org-0.618-0-0-0 $:-0.681 $WebSocket-0.681 $nl criar conexao %&apos;ip&apos;" type="reporter" category="CIBER-EUREKA">
        <comment x="0" y="0" w="256" collapsed="true">Tenta abrir uma conexão com o IP informado no parâmetro e retorna um objeto referência da mesma. Este objeto pode ser atribuido a uma variável que será a referência para a conexão criada.  Obs.: O bloco [Está conectado?] vai informar quando a conexão estiver pronta. </comment>
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s">192.168.1.1</input>
        </inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>ip</l>
                        </list>
                        <l>var WSC = (function () {&#xD;    var instance;&#xD;&#xD;    function init() {&#xD;        //Singleton&#xD;        //Metodos e variaveis privadas&#xD; &#xD;        var url = "ws://" + ip + "/ws";&#xD;        var statusCon = false;&#xD;        var ws = statusCon?ws:new WebSocket(url);&#xD;        var res = "";&#xD;&#xD;        ws.onopen = function (evt) {&#xD;            console.log("Conexao aberta ...");&#xD;            statusCon = true;&#xD;        };&#xD;&#xD;        ws.onmessage = function (evt) {&#xD;            console.log("Dado recebido ... :" + evt.data);&#xD;            res = evt.data;&#xD;        };&#xD;&#xD;        ws.onclose = function (evt) {&#xD;            console.log("Connection closed.");&#xD;            statusCon = false;&#xD;        };&#xD;&#xD;        return {&#xD;            //Metodos e variaveis PUBLICAS&#xD;            enviar: function (msg) {&#xD;                console.log("--&gt; " + msg);&#xD;                if (statusCon) {&#xD;                    ws.send(msg);&#xD;                }&#xD;            },&#xD;&#xD;            opened: function () {&#xD;                return statusCon;&#xD;            },&#xD;&#xD;            leia: function () {&#xD;                return res;&#xD;            },&#xD;&#xD;            fechar: function(){&#xD;                statusCon = false;&#xD;                ws.close();&#xD;            }&#xD;&#xD;        };&#xD;&#xD;    };&#xD;&#xD;    return {&#xD;        getInstance: function () {&#xD;            if (!instance) {&#xD;                instance = init();&#xD;            }&#xD;&#xD;            return instance;&#xD;        }&#xD;    };&#xD;&#xD;})();&#xD;&#xD;var conectWSC = WSC.getInstance();&#xD;&#xD;return conectWSC;&#xD;</l>
                    </block>
                    <list>
                        <block var="ip"/>
                    </list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="$Patrulha-0.618-81-157-214 $EU-0.618-255-214-0 $RE-0.618-214-36-8 $KA-0.618-78-190-69 $.org-0.618-0-0-0 $:-0.681 $WebSocket-0.681 $nl criar conexao e esperar %&apos;ip&apos;" type="reporter" category="CIBER-EUREKA">
        <comment x="0" y="0" w="256" collapsed="true">Tenta abrir uma conexão com o IP informado no parâmetro e retorna um objeto referência da mesma. Este objeto pode ser atribuido a uma variável que será a referência para a conexão criada.  Obs.: O bloco [Está conectado?] vai informar quando a conexão estiver pronta. </comment>
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s">192.168.1.1</input>
        </inputs>
        <script>
            <block s="doDeclareVariables">
                <list>
                    <l>conexao</l>
                </list>
            </block>
            <block s="doSetVar">
                <l>conexao</l>
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>ip</l>
                        </list>
                        <l>var WSC = (function () {&#xD;    var instance;&#xD;&#xD;    function init() {&#xD;        //Singleton&#xD;        //Metodos e variaveis privadas&#xD; &#xD;        var url = "ws://" + ip + "/ws";&#xD;        var statusCon = false;&#xD;        var ws = statusCon?ws:new WebSocket(url);&#xD;        var res = "";&#xD;&#xD;        ws.onopen = function (evt) {&#xD;            console.log("Conexao aberta ...");&#xD;            statusCon = true;&#xD;        };&#xD;&#xD;        ws.onmessage = function (evt) {&#xD;            console.log("Dado recebido ... :" + evt.data);&#xD;            res = evt.data;&#xD;        };&#xD;&#xD;        ws.onclose = function (evt) {&#xD;            console.log("Connection closed.");&#xD;            statusCon = false;&#xD;        };&#xD;&#xD;        return {&#xD;            //Metodos e variaveis PUBLICAS&#xD;            enviar: function (msg) {&#xD;                console.log("--&gt; " + msg);&#xD;                if (statusCon) {&#xD;                    ws.send(msg);&#xD;                }&#xD;            },&#xD;&#xD;            opened: function () {&#xD;                return statusCon;&#xD;            },&#xD;&#xD;            leia: function () {&#xD;                return res;&#xD;            },&#xD;&#xD;            fechar: function(){&#xD;                statusCon = false;&#xD;                ws.close();&#xD;            }&#xD;&#xD;        };&#xD;&#xD;    };&#xD;&#xD;    return {&#xD;        getInstance: function () {&#xD;            if (!instance) {&#xD;                instance = init();&#xD;            }&#xD;&#xD;            return instance;&#xD;        }&#xD;    };&#xD;&#xD;})();&#xD;&#xD;var conectWSC = WSC.getInstance();&#xD;&#xD;return conectWSC;&#xD;</l>
                    </block>
                    <list>
                        <block var="ip"/>
                    </list>
                </block>
            </block>
            <block s="doWaitUntil">
                <custom-block s="$Patrulha-0.618-81-157-214 $EU-0.618-255-214-0 $RE-0.618-214-36-8 $KA-0.618-78-190-69 $.org-0.618-0-0-0 $:-0.681 $WebSocket-0.681 %br %s está conectado?">
                    <block var="conexao"/>
                </custom-block>
            </block>
            <block s="doReport">
                <block var="conexao"/>
            </block>
        </script>
    </block-definition>
    <block-definition s="$Patrulha-0.618-81-157-214 $EU-0.618-255-214-0 $RE-0.618-214-36-8 $KA-0.618-78-190-69 $.org-0.618-0-0-0 $:-0.681 $WebSocket-0.681 $nl %&apos;WS&apos; está conectado?" type="predicate" category="CIBER-EUREKA">
        <comment x="0" y="0" w="256" collapsed="true">Retorna TRUE caso a conexão estiver estabelecida e FALSE caso contrário.</comment>
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>ws</l>
                        </list>
                        <l>return ws.opened()||false</l>
                    </block>
                    <list>
                        <block var="WS"/>
                    </list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="$Patrulha-0.618-81-157-214 $EU-0.618-255-214-0 $RE-0.618-214-36-8 $KA-0.618-78-190-69 $.org-0.618-0-0-0 $:-0.681 $WebSocket-0.681 $nl enviar para %&apos;WSC&apos; mensagem: %&apos;mesg&apos;" type="command" category="CIBER-EUREKA">
        <comment x="0" y="0" w="256" collapsed="true">Envia um texto indicado pelo campo mensagem à conexão indicada no parâmetro.</comment>
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>WSC</l>
                        <l>mesg</l>
                    </list>
                    <l>if (WSC.opened()||false){&#xD;   WSC.enviar(mesg)&#xD;}else{&#xD;   alert("ERRO: Você tem que criar a conexão primeiro!");&#xD;}</l>
                </block>
                <list>
                    <block var="WSC"/>
                    <block var="mesg"/>
                </list>
            </block>
        </script>
    </block-definition>
    <block-definition s="$Patrulha-0.618-81-157-214 $EU-0.618-255-214-0 $RE-0.618-214-36-8 $KA-0.618-78-190-69 $.org-0.618-0-0-0 $:-0.681 $WebSocket-0.681 $nl receber dado de %&apos;WS&apos;" type="reporter" category="CIBER-EUREKA">
        <comment x="0" y="0" w="256" collapsed="true">Retorna o dado em formato STRING oriundo da conexão indicada no parâmetro da função.</comment>
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doReport">
                <block s="evaluate">
                    <block s="reportJSFunction">
                        <list>
                            <l>WS</l>
                        </list>
                        <l>return WS.leia()</l>
                    </block>
                    <list>
                        <block var="WS"/>
                    </list>
                </block>
            </block>
        </script>
    </block-definition>
    <block-definition s="$Patrulha-0.618-81-157-214 $EU-0.618-255-214-0 $RE-0.618-214-36-8 $KA-0.618-78-190-69 $.org-0.618-0-0-0 $:-0.681 $WebSocket-0.681 $nl desconectar %&apos;WSC&apos;" type="command" category="CIBER-EUREKA">
        <comment x="0" y="0" w="256" collapsed="true">Desconecta conexao indicada no parâmetro.</comment>
        <header></header>
        <code></code>
        <translations></translations>
        <inputs>
            <input type="%s"></input>
        </inputs>
        <script>
            <block s="doRun">
                <block s="reportJSFunction">
                    <list>
                        <l>WSC</l>
                    </list>
                    <l>WSC.fechar();</l>
                </block>
                <list>
                    <block var="WSC"/>
                </list>
            </block>
        </script>
        <scripts>
            <script x="486.2732979910714" y="53.880952380952344">
                <block var="s"/>
            </script>
        </scripts>
    </block-definition>

</blocks>